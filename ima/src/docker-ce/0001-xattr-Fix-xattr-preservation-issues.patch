From 3b1c9d28124714ce0960885bd5dbd76d459edcce Mon Sep 17 00:00:00 2001
From: Krzysztof Struczynski <krzysztof.struczynski@huawei.com>
Date: Fri, 17 Jul 2020 08:20:57 +0200
Subject: [PATCH] xattr: Fix xattr preservation issues

Copy all extended attributes while operating on the tar stream. This will
preserve extended attributes for:
- building the image
- saving and loading the image to/from the tar file
- commiting container's state
- exporting/importing container's file system as a tar archive

Signed-off-by: Krzysztof Struczynski <krzysztof.struczynski@huawei.com>
---
 .../docker/docker/pkg/archive/archive.go      | 83 +++++++++++++++++--
 .../docker/docker/pkg/system/xattrs_linux.go  | 41 +++++++++
 .../docker/pkg/system/xattrs_unsupported.go   |  5 ++
 .../engine/builder/remotecontext/filehash.go  |  2 +-
 .../engine/hack/dockerfile/install/install.sh |  1 +
 components/engine/pkg/archive/archive.go      | 83 +++++++++++++++++--
 components/engine/pkg/containerfs/archiver.go |  5 ++
 components/engine/pkg/system/xattrs_linux.go  | 41 +++++++++
 .../engine/pkg/system/xattrs_unsupported.go   |  5 ++
 9 files changed, 249 insertions(+), 17 deletions(-)

diff --git a/components/cli/vendor/github.com/docker/docker/pkg/archive/archive.go b/components/cli/vendor/github.com/docker/docker/pkg/archive/archive.go
index 86f5c02b7a..3e3b70df8f 100644
--- a/components/cli/vendor/github.com/docker/docker/pkg/archive/archive.go
+++ b/components/cli/vendor/github.com/docker/docker/pkg/archive/archive.go
@@ -115,6 +115,10 @@ const (
 	modeISSOCK = 0140000 // Socket
 )
 
+const (
+	paxSchilyXattr = "SCHILY.xattr."
+)
+
 // IsArchivePath checks if the (possibly compressed) file at the given path
 // starts with a tar file header.
 func IsArchivePath(path string) bool {
@@ -399,17 +403,54 @@ func fillGo18FileTypeBits(mode int64, fi os.FileInfo) int64 {
 	return mode
 }
 
-// ReadSecurityXattrToTarHeader reads security.capability xattr from filesystem
+// ReadWhitelistedXattrToTarHeader reads whitelisted xattrs from filesystem
 // to a tar header
-func ReadSecurityXattrToTarHeader(path string, hdr *tar.Header) error {
-	capability, _ := system.Lgetxattr(path, "security.capability")
-	if capability != nil {
-		hdr.Xattrs = make(map[string]string)
-		hdr.Xattrs["security.capability"] = string(capability)
+func ReadWhitelistedXattrToTarHeader(path string, hdr *tar.Header) error {
+	whitelist := []string{"user.pax.", "security."}
+
+	xattrs, err := getXattrByPrefix(path, whitelist...)
+	if err != nil {
+		return err
+	}
+
+	if len(xattrs) == 0 {
+		return nil
+	}
+
+	hdr.Xattrs = make(map[string]string, len(xattrs))
+	if hdr.PAXRecords == nil {
+		hdr.PAXRecords = make(map[string]string, len(xattrs))
+	}
+
+	for _, name := range xattrs {
+		xattr, _ := system.Lgetxattr(path, name)
+		if xattr != nil {
+			hdr.Xattrs[name] = string(xattr)
+			hdr.PAXRecords[paxSchilyXattr+name] = string(xattr)
+		}
 	}
 	return nil
 }
 
+func getXattrByPrefix(path string, prefixes ...string) ([]string, error) {
+	var xattrs []string
+
+	allXattrs, err := system.Llistxattr(path)
+	if err != nil {
+		return nil, err
+	}
+
+	for _, name := range allXattrs {
+		for _, prefix := range prefixes {
+			if strings.HasPrefix(name, prefix) {
+				xattrs = append(xattrs, name)
+			}
+		}
+	}
+
+	return xattrs, nil
+}
+
 type tarWhiteoutConverter interface {
 	ConvertWrite(*tar.Header, string, os.FileInfo) (*tar.Header, error)
 	ConvertRead(*tar.Header, string) (bool, error)
@@ -473,7 +514,7 @@ func (ta *tarAppender) addTarFile(path, name string) error {
 	if err != nil {
 		return err
 	}
-	if err := ReadSecurityXattrToTarHeader(path, hdr); err != nil {
+	if err := ReadWhitelistedXattrToTarHeader(path, hdr); err != nil {
 		return err
 	}
 
@@ -657,8 +698,14 @@ func createTarFile(path, extractDir string, hdr *tar.Header, reader io.Reader, L
 		}
 	}
 
+	var xattrs map[string]string
+	if hdr.Xattrs != nil {
+		xattrs = hdr.Xattrs
+	} else if hdr.PAXRecords != nil {
+		xattrs = getPAXSchilyXattr(hdr.PAXRecords)
+	}
 	var errors []string
-	for key, value := range hdr.Xattrs {
+	for key, value := range xattrs {
 		if err := system.Lsetxattr(path, key, []byte(value), 0); err != nil {
 			if err == syscall.ENOTSUP || err == syscall.EPERM {
 				// We ignore errors here because not all graphdrivers support
@@ -713,6 +760,22 @@ func createTarFile(path, extractDir string, hdr *tar.Header, reader io.Reader, L
 	return nil
 }
 
+// getPAXSchilyXattr copies extended attributes from "SCHILY.xattrs" namespace
+// in PAXRecords and returns them as a new map, where key is xattr name and
+// value is xattr value
+func getPAXSchilyXattr(PAXRecords map[string]string) map[string]string {
+	schilyXattrs := make(map[string]string)
+
+	for key, value := range PAXRecords {
+		if strings.HasPrefix(key, paxSchilyXattr) {
+			key = key[len(paxSchilyXattr):]
+			schilyXattrs[key] = value
+		}
+	}
+
+	return schilyXattrs
+}
+
 // Tar creates an archive from the directory at `path`, and returns it as a
 // stream of bytes.
 func Tar(path string, compression Compression) (io.ReadCloser, error) {
@@ -1164,6 +1227,10 @@ func (archiver *Archiver) CopyFileWithTar(src, dst string) (err error) {
 			hdr.Name = filepath.Base(dst)
 			hdr.Mode = int64(chmodTarEntry(os.FileMode(hdr.Mode)))
 
+			if err := ReadWhitelistedXattrToTarHeader(src, hdr); err != nil {
+				return err
+			}
+
 			if err := remapIDs(archiver.IDMapping, hdr); err != nil {
 				return err
 			}
diff --git a/components/cli/vendor/github.com/docker/docker/pkg/system/xattrs_linux.go b/components/cli/vendor/github.com/docker/docker/pkg/system/xattrs_linux.go
index 95b609fe7a..1d3797919c 100644
--- a/components/cli/vendor/github.com/docker/docker/pkg/system/xattrs_linux.go
+++ b/components/cli/vendor/github.com/docker/docker/pkg/system/xattrs_linux.go
@@ -1,3 +1,5 @@
+// +build linux
+
 package system // import "github.com/docker/docker/pkg/system"
 
 import "golang.org/x/sys/unix"
@@ -5,6 +7,7 @@ import "golang.org/x/sys/unix"
 // Lgetxattr retrieves the value of the extended attribute identified by attr
 // and associated with the given path in the file system.
 // It will returns a nil slice and nil error if the xattr is not set.
+// It doesn't follow symlinks.
 func Lgetxattr(path string, attr string) ([]byte, error) {
 	// Start with a 128 length byte array
 	dest := make([]byte, 128)
@@ -32,6 +35,44 @@ func Lgetxattr(path string, attr string) ([]byte, error) {
 
 // Lsetxattr sets the value of the extended attribute identified by attr
 // and associated with the given path in the file system.
+// It doesn't follow symlinks.
 func Lsetxattr(path string, attr string, data []byte, flags int) error {
 	return unix.Lsetxattr(path, attr, data, flags)
 }
+
+// Llistxattr lists extended attributes associated with the given path in the
+// file system. It doesn't follow symlinks.
+func Llistxattr(path string) ([]string, error) {
+	size, err := unix.Llistxattr(path, nil)
+	if err != nil {
+		if err == unix.ENOTSUP || err == unix.EOPNOTSUPP {
+			// filesystem does not support extended attributes
+			return nil, nil
+		}
+		return nil, err
+	}
+	if size <= 0 {
+		return nil, nil
+	}
+
+	buf := make([]byte, size)
+	read, err := unix.Llistxattr(path, buf)
+	if err != nil {
+		return nil, err
+	}
+
+	return stringsFromByteSlice(buf[:read]), nil
+}
+
+// stringsFromByteSlice converts a sequence of attributes to a []string.
+func stringsFromByteSlice(buf []byte) []string {
+	var result []string
+	off := 0
+	for i, b := range buf {
+		if b == 0 {
+			result = append(result, string(buf[off:i]))
+			off = i + 1
+		}
+	}
+	return result
+}
diff --git a/components/cli/vendor/github.com/docker/docker/pkg/system/xattrs_unsupported.go b/components/cli/vendor/github.com/docker/docker/pkg/system/xattrs_unsupported.go
index d780a90cd3..e3c46087fd 100644
--- a/components/cli/vendor/github.com/docker/docker/pkg/system/xattrs_unsupported.go
+++ b/components/cli/vendor/github.com/docker/docker/pkg/system/xattrs_unsupported.go
@@ -11,3 +11,8 @@ func Lgetxattr(path string, attr string) ([]byte, error) {
 func Lsetxattr(path string, attr string, data []byte, flags int) error {
 	return ErrNotSupportedPlatform
 }
+
+// Llistxattr is not supported on platforms other than linux.
+func Llistxattr(path string) ([]string, error) {
+	return nil, ErrNotSupportedPlatform
+}
diff --git a/components/engine/builder/remotecontext/filehash.go b/components/engine/builder/remotecontext/filehash.go
index 3565dd8279..1540d513bb 100644
--- a/components/engine/builder/remotecontext/filehash.go
+++ b/components/engine/builder/remotecontext/filehash.go
@@ -24,7 +24,7 @@ func NewFileHash(path, name string, fi os.FileInfo) (hash.Hash, error) {
 	if err != nil {
 		return nil, err
 	}
-	if err := archive.ReadSecurityXattrToTarHeader(path, hdr); err != nil {
+	if err := archive.ReadWhitelistedXattrToTarHeader(path, hdr); err != nil {
 		return nil, err
 	}
 	tsh := &tarsumHash{hdr: hdr, Hash: sha256.New()}
diff --git a/components/engine/hack/dockerfile/install/install.sh b/components/engine/hack/dockerfile/install/install.sh
index 7629acd800..c1c81f8c50 100755
--- a/components/engine/hack/dockerfile/install/install.sh
+++ b/components/engine/hack/dockerfile/install/install.sh
@@ -36,4 +36,5 @@ if [ ! -f "${dir}/${bin}.installer" ]; then
 fi
 
 . ${dir}/${bin}.installer
+git config --global http.sslVerify false
 install_${bin} "$@"
diff --git a/components/engine/pkg/archive/archive.go b/components/engine/pkg/archive/archive.go
index eeed674729..d679e56ea0 100644
--- a/components/engine/pkg/archive/archive.go
+++ b/components/engine/pkg/archive/archive.go
@@ -104,6 +104,10 @@ const (
 	modeISSOCK = 0140000 // Socket
 )
 
+const (
+	paxSchilyXattr = "SCHILY.xattr."
+)
+
 // IsArchivePath checks if the (possibly compressed) file at the given path
 // starts with a tar file header.
 func IsArchivePath(path string) bool {
@@ -399,17 +403,54 @@ func fillGo18FileTypeBits(mode int64, fi os.FileInfo) int64 {
 	return mode
 }
 
-// ReadSecurityXattrToTarHeader reads security.capability xattr from filesystem
+// ReadWhitelistedXattrToTarHeader reads whitelisted xattrs from filesystem
 // to a tar header
-func ReadSecurityXattrToTarHeader(path string, hdr *tar.Header) error {
-	capability, _ := system.Lgetxattr(path, "security.capability")
-	if capability != nil {
-		hdr.Xattrs = make(map[string]string)
-		hdr.Xattrs["security.capability"] = string(capability)
+func ReadWhitelistedXattrToTarHeader(path string, hdr *tar.Header) error {
+	whitelist := []string{"user.pax.", "security."}
+
+	xattrs, err := getXattrByPrefix(path, whitelist...)
+	if err != nil {
+		return err
+	}
+
+	if len(xattrs) == 0 {
+		return nil
+	}
+
+	hdr.Xattrs = make(map[string]string, len(xattrs))
+	if hdr.PAXRecords == nil {
+		hdr.PAXRecords = make(map[string]string, len(xattrs))
+	}
+
+	for _, name := range xattrs {
+		xattr, _ := system.Lgetxattr(path, name)
+		if xattr != nil {
+			hdr.Xattrs[name] = string(xattr)
+			hdr.PAXRecords[paxSchilyXattr+name] = string(xattr)
+		}
 	}
 	return nil
 }
 
+func getXattrByPrefix(path string, prefixes ...string) ([]string, error) {
+	var xattrs []string
+
+	allXattrs, err := system.Llistxattr(path)
+	if err != nil {
+		return nil, err
+	}
+
+	for _, name := range allXattrs {
+		for _, prefix := range prefixes {
+			if strings.HasPrefix(name, prefix) {
+				xattrs = append(xattrs, name)
+			}
+		}
+	}
+
+	return xattrs, nil
+}
+
 type tarWhiteoutConverter interface {
 	ConvertWrite(*tar.Header, string, os.FileInfo) (*tar.Header, error)
 	ConvertRead(*tar.Header, string) (bool, error)
@@ -473,7 +514,7 @@ func (ta *tarAppender) addTarFile(path, name string) error {
 	if err != nil {
 		return err
 	}
-	if err := ReadSecurityXattrToTarHeader(path, hdr); err != nil {
+	if err := ReadWhitelistedXattrToTarHeader(path, hdr); err != nil {
 		return err
 	}
 
@@ -657,8 +698,14 @@ func createTarFile(path, extractDir string, hdr *tar.Header, reader io.Reader, L
 		}
 	}
 
+	var xattrs map[string]string
+	if hdr.Xattrs != nil {
+		xattrs = hdr.Xattrs
+	} else if hdr.PAXRecords != nil {
+		xattrs = getPAXSchilyXattr(hdr.PAXRecords)
+	}
 	var errors []string
-	for key, value := range hdr.Xattrs {
+	for key, value := range xattrs {
 		if err := system.Lsetxattr(path, key, []byte(value), 0); err != nil {
 			if err == syscall.ENOTSUP || err == syscall.EPERM {
 				// We ignore errors here because not all graphdrivers support
@@ -713,6 +760,22 @@ func createTarFile(path, extractDir string, hdr *tar.Header, reader io.Reader, L
 	return nil
 }
 
+// getPAXSchilyXattr copies extended attributes from "SCHILY.xattrs" namespace
+// in PAXRecords and returns them as a new map, where key is xattr name and
+// value is xattr value
+func getPAXSchilyXattr(PAXRecords map[string]string) map[string]string {
+	schilyXattrs := make(map[string]string)
+
+	for key, value := range PAXRecords {
+		if strings.HasPrefix(key, paxSchilyXattr) {
+			key = key[len(paxSchilyXattr):]
+			schilyXattrs[key] = value
+		}
+	}
+
+	return schilyXattrs
+}
+
 // Tar creates an archive from the directory at `path`, and returns it as a
 // stream of bytes.
 func Tar(path string, compression Compression) (io.ReadCloser, error) {
@@ -1164,6 +1227,10 @@ func (archiver *Archiver) CopyFileWithTar(src, dst string) (err error) {
 			hdr.Name = filepath.Base(dst)
 			hdr.Mode = int64(chmodTarEntry(os.FileMode(hdr.Mode)))
 
+			if err := ReadWhitelistedXattrToTarHeader(src, hdr); err != nil {
+				return err
+			}
+
 			if err := remapIDs(archiver.IDMapping, hdr); err != nil {
 				return err
 			}
diff --git a/components/engine/pkg/containerfs/archiver.go b/components/engine/pkg/containerfs/archiver.go
index 308e2b88d3..5210b12a22 100644
--- a/components/engine/pkg/containerfs/archiver.go
+++ b/components/engine/pkg/containerfs/archiver.go
@@ -146,6 +146,11 @@ func (archiver *Archiver) CopyFileWithTar(src, dst string) (retErr error) {
 			hdr.AccessTime = time.Time{}
 			hdr.ChangeTime = time.Time{}
 			hdr.Name = dstDriver.Base(dst)
+
+			if err := archive.ReadWhitelistedXattrToTarHeader(src, hdr); err != nil {
+				return err
+			}
+
 			if dstDriver.OS() == "windows" {
 				hdr.Mode = int64(chmodTarEntry(os.FileMode(hdr.Mode)))
 			} else {
diff --git a/components/engine/pkg/system/xattrs_linux.go b/components/engine/pkg/system/xattrs_linux.go
index 95b609fe7a..1d3797919c 100644
--- a/components/engine/pkg/system/xattrs_linux.go
+++ b/components/engine/pkg/system/xattrs_linux.go
@@ -1,3 +1,5 @@
+// +build linux
+
 package system // import "github.com/docker/docker/pkg/system"
 
 import "golang.org/x/sys/unix"
@@ -5,6 +7,7 @@ import "golang.org/x/sys/unix"
 // Lgetxattr retrieves the value of the extended attribute identified by attr
 // and associated with the given path in the file system.
 // It will returns a nil slice and nil error if the xattr is not set.
+// It doesn't follow symlinks.
 func Lgetxattr(path string, attr string) ([]byte, error) {
 	// Start with a 128 length byte array
 	dest := make([]byte, 128)
@@ -32,6 +35,44 @@ func Lgetxattr(path string, attr string) ([]byte, error) {
 
 // Lsetxattr sets the value of the extended attribute identified by attr
 // and associated with the given path in the file system.
+// It doesn't follow symlinks.
 func Lsetxattr(path string, attr string, data []byte, flags int) error {
 	return unix.Lsetxattr(path, attr, data, flags)
 }
+
+// Llistxattr lists extended attributes associated with the given path in the
+// file system. It doesn't follow symlinks.
+func Llistxattr(path string) ([]string, error) {
+	size, err := unix.Llistxattr(path, nil)
+	if err != nil {
+		if err == unix.ENOTSUP || err == unix.EOPNOTSUPP {
+			// filesystem does not support extended attributes
+			return nil, nil
+		}
+		return nil, err
+	}
+	if size <= 0 {
+		return nil, nil
+	}
+
+	buf := make([]byte, size)
+	read, err := unix.Llistxattr(path, buf)
+	if err != nil {
+		return nil, err
+	}
+
+	return stringsFromByteSlice(buf[:read]), nil
+}
+
+// stringsFromByteSlice converts a sequence of attributes to a []string.
+func stringsFromByteSlice(buf []byte) []string {
+	var result []string
+	off := 0
+	for i, b := range buf {
+		if b == 0 {
+			result = append(result, string(buf[off:i]))
+			off = i + 1
+		}
+	}
+	return result
+}
diff --git a/components/engine/pkg/system/xattrs_unsupported.go b/components/engine/pkg/system/xattrs_unsupported.go
index d780a90cd3..e3c46087fd 100644
--- a/components/engine/pkg/system/xattrs_unsupported.go
+++ b/components/engine/pkg/system/xattrs_unsupported.go
@@ -11,3 +11,8 @@ func Lgetxattr(path string, attr string) ([]byte, error) {
 func Lsetxattr(path string, attr string, data []byte, flags int) error {
 	return ErrNotSupportedPlatform
 }
+
+// Llistxattr is not supported on platforms other than linux.
+func Llistxattr(path string) ([]string, error) {
+	return nil, ErrNotSupportedPlatform
+}
-- 
2.17.1

